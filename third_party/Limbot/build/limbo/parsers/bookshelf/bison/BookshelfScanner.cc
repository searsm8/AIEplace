#line 2 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"

#line 4 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer BookshelfParserFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define BookshelfParseralloc_ALREADY_DEFINED
#else
#define yyalloc BookshelfParseralloc
#endif

#ifdef yyrealloc
#define BookshelfParserrealloc_ALREADY_DEFINED
#else
#define yyrealloc BookshelfParserrealloc
#endif

#ifdef yyfree
#define BookshelfParserfree_ALREADY_DEFINED
#else
#define yyfree BookshelfParserfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[353] =
    {   0,
        0,    0,   67,   65,   63,   64,   65,   62,   65,   65,
       65,   57,   60,   37,   60,   60,   41,   60,   60,   60,
       36,   60,   38,   35,   60,   60,   39,   60,   60,   60,
       40,   63,    0,   61,   62,    0,   57,    0,    0,    0,
        0,   58,   57,   60,   60,   60,   60,   60,   45,   60,
       42,   43,   44,   60,   60,   60,   60,   60,   60,   60,
       26,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   59,    0,    0,    0,   58,   30,   60,
       60,   60,   18,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   23,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   27,    0,    0,    0,   60,   60,   60,
       60,   46,   60,   60,   60,   60,   25,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   21,   60,   60,   60,    0,    0,    0,   60,   60,
       60,   31,   60,   60,   60,   60,   60,   24,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   29,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   31,    0,
        0,   60,   60,   60,   60,   60,   11,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   33,
       28,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,    0,   33,    0,   60,   60,    7,   60,   60,   60,
       60,   60,   60,    1,   60,   60,   60,    2,    6,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,    0,    0,   60,   60,   32,   60,   60,   60,   60,
       60,   60,   60,    3,   60,   17,   60,   60,   60,   60,
       60,   60,   20,   53,   34,    9,   60,   32,   34,   60,
       60,   60,   60,   60,   60,   22,   60,   60,   60,   60,
       60,   60,   60,   12,   60,   60,   60,   60,   60,   10,
       52,    8,   60,   60,   60,   60,   60,   60,   14,   60,
       60,   60,   60,   60,   51,   60,   60,   60,   60,   60,

       60,   60,   60,   13,   60,   60,   19,   60,   60,   60,
       60,   49,   60,   60,   60,    4,   15,   16,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   50,   60,
       55,   60,   60,   60,   60,   60,   60,   60,   54,   60,
       56,   60,   47,   60,   60,   48,   60,   60,   60,   60,
        5,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    6,    1,    1,    7,    1,
        1,    1,    8,    6,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   35,   36,   37,
        6,    1,    6,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   22,   48,   49,   50,   51,
       52,   53,   22,   54,   55,   56,   57,   58,   59,   60,
       61,   62,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4
    } ;

static const flex_int16_t yy_base[357] =
    {   0,
        0,    0,  443,  718,  317,  718,  277,    0,    0,  163,
       45,   57,   33,   42,   41,    0,   44,   86,   42,   57,
        0,   54,   65,    0,   55,   53,  103,   89,  112,  104,
       55,  170,  161,  718,    0,  116,   66,   66,   70,   88,
        0,  114,  136,    0,   80,  103,  125,  115,    0,   99,
        0,    0,    0,  121,  135,  129,  135,  131,  148,  141,
      154,  137,  146,  158,  142,  160,  147,  154,  156,  153,
      155,  172,  158,   87,  154,  179,  168,   76,    0,  184,
      173,  187,    0,  190,  192,  191,  191,  181,  201,  199,
      243,  204,  191,    0,  195,  203,  195,  201,  211,  216,

      211,  206,  209,    0,  215,  226,  226,  229,  228,  224,
      243,  234,  243,  228,  245,  259,    0,  238,  255,  274,
      259,  255,  263,  270,  271,  286,  288,  281,  273,  288,
      282,    0,  303,  297,  292,  306,  306,  311,  314,  307,
      303,   47,  303,  303,  311,  310,  322,    0,  316,  315,
      316,  335,  330,  324,  329,  333,  336,    0,  335,  337,
      346,  348,  339,  349,  349,  361,  364,  367,   45,  368,
      373,  370,  366,  359,  368,  376,    0,  375,  386,  379,
      389,  379,  394,  395,  387,  390,  391,  396,  397,    0,
        0,  403,  412,  402,  412,  404,  419,  398,  419,  427,

      427,  418,  718,  431,  432,  440,    0,  434,  438,  428,
      431,  446,  444,    0,  441,  441,  455,    0,    0,  446,
      452,  460,  463,  455,  451,  456,  463,  471,  475,  469,
      473,  476,  484,  474,  475,    0,  487,  496,  483,  492,
      498,  503,  494,    0,  506,    0,  498,  499,  501,  511,
      509,  509,   43,    0,    0,  517,  511,  718,  718,  511,
      516,  514,  519,  532,  530,    0,  532,  531,  526,  540,
      529,  535,  533,    0,  547,  543,  554,  551,  544,    0,
        0,  559,  560,  549,  559,  555,  570,  563,    0,  565,
      559,  569,  570,  567,    0,  570,  586,  582,  584,  581,

      595,  585,  584,    0,  579,  592,    0,  606,  591,  595,
      598,    0,  599,  603,  609,    0,    0,    0,  616,  612,
      622,  618,  622,  611,  610,  623,  616,  635,    0,  636,
        0,  631,  625,  622,  639,  632,  652,  632,    0,  638,
        0,  642,    0,  637,  648,    0,  648,  661,  661,  652,
        0,  718,  707,  711,   68,  713
    } ;

static const flex_int16_t yy_def[357] =
    {   0,
      352,    1,  352,  352,  352,  352,  353,  354,  355,  352,
      352,  352,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  352,  353,  352,  354,  352,  352,  352,  352,  352,
      355,  352,  352,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  352,  352,  352,  352,  352,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  352,  352,  352,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  352,  352,  352,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  352,  352,
      352,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  352,  352,  352,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  352,  352,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  352,  352,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,    0,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_nxt[781] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   10,    4,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   16,   16,   16,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   16,   16,   16,    4,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   16,   16,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   16,
       16,   16,   38,   41,   45,   46,   42,   47,   43,   48,
       54,   36,   39,   55,   57,   42,   40,   37,   61,   62,
      276,   58,  202,   56,  175,   73,   75,   78,   38,   45,
       46,   59,   47,   76,   48,   54,   60,   39,   74,   55,

       57,   40,   49,   61,   62,   67,   50,   58,   56,   68,
       73,   51,   75,   77,   79,   52,   59,   63,   76,   53,
       71,   60,   64,   65,   72,   78,   69,   74,   49,   80,
       83,   67,   50,   84,   66,   68,   51,   70,   77,   79,
       52,   85,   41,   63,   53,   42,   71,   43,   64,   65,
       72,   81,   69,   82,   80,   86,   83,   87,   84,   66,
       88,   89,   70,   90,   34,   91,   92,   85,   93,   94,
       95,   32,   96,   97,   37,   98,   81,   99,   82,  100,
      101,   86,   87,  102,  103,   88,   89,  104,  105,   90,
       91,  106,   92,   93,   94,  107,   95,   96,  108,   97,

       98,  109,   99,  110,  100,  101,  111,  112,  102,  113,
      103,  114,  104,  105,  115,  118,  116,  106,  125,  128,
      107,  126,  127,  129,  108,  130,  109,  131,  132,  110,
      117,  136,  111,  112,  133,  113,  134,  114,  135,  115,
      137,  118,  116,  140,  125,  128,  126,  127,  129,  138,
      130,  139,  141,  131,  132,  117,  119,  136,  142,  133,
      143,  134,  144,  135,  145,  146,  137,  148,  120,  140,
      121,  122,  123,  124,  138,  147,  139,  141,  149,  153,
       34,  154,  119,  155,  142,  143,  156,  157,  144,  145,
      150,  146,  148,  120,  151,  121,  122,  123,  124,  163,

      152,  147,  158,  149,  159,  153,  154,  160,  164,  155,
      161,  165,  156,  157,  162,  166,  150,  167,   32,  168,
      151,  169,  170,  171,  163,  152,  172,  173,  158,  174,
      159,  176,  160,  177,  164,  161,  165,  178,  179,  162,
      180,  166,  181,  167,  168,  182,  183,  169,  170,  171,
      184,  190,  172,  173,  174,  186,  176,  187,  177,  188,
      185,  189,  178,  179,  191,  192,  180,  181,  195,  198,
      182,  183,  196,  193,  197,  199,  184,  190,  200,  201,
      186,  194,  187,  203,  188,  185,  189,  204,  205,  191,
      192,  206,  207,  208,  195,  198,  209,  196,  193,  197,

      210,  199,  211,  213,  200,  201,  194,  212,  214,  203,
      215,  216,  220,  204,  205,  217,  206,  207,  208,  218,
      219,  221,  209,  222,  223,  210,  224,  225,  211,  213,
      226,  227,  212,  214,  228,  229,  215,  216,  220,  230,
      217,  231,  352,  232,  218,  219,  221,  233,  234,  222,
      223,  224,  235,  225,  236,  226,  237,  227,  238,  228,
      239,  229,  241,  352,  240,  230,  242,  231,  232,  243,
      244,  245,  247,  233,  234,  246,  248,  249,  235,  250,
      236,  251,  237,  238,  252,  239,  253,  254,  241,  240,
      255,  242,  256,  257,  243,  244,  258,  245,  247,  259,

      246,  260,  248,  249,  250,  261,  251,  262,  263,  252,
      264,  253,  265,  254,  266,  267,  255,  256,  268,  257,
      269,  272,  258,  270,  271,  259,  260,  273,  274,  275,
      261,  277,  280,  262,  263,  264,  278,  279,  265,  281,
      266,  267,  282,  268,  283,  284,  269,  272,  270,  271,
      285,  286,  288,  273,  274,  275,  287,  277,  280,  289,
      290,  278,  279,  291,  281,  292,  294,  282,  293,  295,
      283,  284,  296,  297,  298,  300,  285,  286,  288,  299,
      301,  287,  302,  304,  289,  290,  303,  305,  291,  306,
      307,  292,  294,  293,  308,  295,  309,  296,  310,  297,

      298,  300,  311,  312,  299,  301,  313,  314,  302,  304,
      315,  303,  305,  316,  317,  306,  307,  318,  319,  308,
      320,  309,  321,  322,  310,  323,  324,  325,  311,  312,
      326,  313,  327,  314,  328,  315,  329,  330,  316,  317,
      331,  332,  318,  333,  319,  320,  334,  321,  322,  335,
      323,  324,  336,  325,  337,  338,  326,  339,  327,  340,
      328,  341,  329,  330,  342,  331,  332,  343,  344,  333,
      345,  334,  346,  347,  348,  335,  349,  350,  336,  337,
      338,  351,  339,  352,  352,  340,  341,  352,  352,  352,
      342,  352,  343,  344,  352,  345,  352,  346,  347,  348,

      352,  352,  349,  350,  352,  352,  351,   33,   33,   33,
       33,   35,  352,   35,   35,   44,   44,    3,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_chk[781] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   11,   12,   13,   14,   12,   15,   12,   17,
       19,  355,   11,   20,   22,   37,   11,   37,   25,   26,
      253,   23,  169,   20,  142,   31,   38,   78,   11,   13,
       14,   23,   15,   39,   17,   19,   23,   11,   74,   20,

       22,   11,   18,   25,   26,   28,   18,   23,   20,   28,
       31,   18,   38,   40,   45,   18,   23,   27,   39,   18,
       30,   23,   27,   27,   30,   42,   29,   36,   18,   46,
       48,   28,   18,   50,   27,   28,   18,   29,   40,   45,
       18,   54,   43,   27,   18,   43,   30,   43,   27,   27,
       30,   47,   29,   47,   46,   55,   48,   56,   50,   27,
       57,   58,   29,   59,   33,   60,   61,   54,   62,   63,
       64,   32,   65,   66,   10,   67,   47,   68,   47,   69,
       70,   55,   56,   71,   72,   57,   58,   73,   75,   59,
       60,   76,   61,   62,   63,   77,   64,   65,   80,   66,

       67,   81,   68,   82,   69,   70,   84,   85,   71,   86,
       72,   87,   73,   75,   88,   90,   89,   76,   92,   96,
       77,   93,   95,   97,   80,   98,   81,   99,  100,   82,
       89,  105,   84,   85,  101,   86,  102,   87,  103,   88,
      106,   90,   89,  109,   92,   96,   93,   95,   97,  107,
       98,  108,  110,   99,  100,   89,   91,  105,  111,  101,
      112,  102,  113,  103,  114,  115,  106,  118,   91,  109,
       91,   91,   91,   91,  107,  116,  108,  110,  119,  121,
        7,  122,   91,  123,  111,  112,  124,  125,  113,  114,
      120,  115,  118,   91,  120,   91,   91,   91,   91,  129,

      120,  116,  126,  119,  127,  121,  122,  128,  130,  123,
      128,  131,  124,  125,  128,  133,  120,  134,    5,  135,
      120,  136,  137,  138,  129,  120,  139,  140,  126,  141,
      127,  143,  128,  144,  130,  128,  131,  145,  146,  128,
      147,  133,  149,  134,  135,  150,  151,  136,  137,  138,
      152,  157,  139,  140,  141,  153,  143,  154,  144,  155,
      152,  156,  145,  146,  159,  160,  147,  149,  162,  165,
      150,  151,  163,  161,  164,  166,  152,  157,  167,  168,
      153,  161,  154,  170,  155,  152,  156,  171,  172,  159,
      160,  173,  174,  175,  162,  165,  176,  163,  161,  164,

      178,  166,  179,  181,  167,  168,  161,  180,  182,  170,
      183,  184,  188,  171,  172,  185,  173,  174,  175,  186,
      187,  189,  176,  192,  193,  178,  194,  195,  179,  181,
      196,  197,  180,  182,  198,  199,  183,  184,  188,  200,
      185,  201,    3,  202,  186,  187,  189,  204,  205,  192,
      193,  194,  206,  195,  208,  196,  209,  197,  210,  198,
      211,  199,  212,    0,  211,  200,  213,  201,  202,  215,
      216,  217,  221,  204,  205,  220,  222,  223,  206,  224,
      208,  225,  209,  210,  226,  211,  227,  228,  212,  211,
      229,  213,  230,  231,  215,  216,  232,  217,  221,  233,

      220,  234,  222,  223,  224,  235,  225,  237,  238,  226,
      239,  227,  240,  228,  241,  242,  229,  230,  243,  231,
      245,  249,  232,  247,  248,  233,  234,  250,  251,  252,
      235,  256,  261,  237,  238,  239,  257,  260,  240,  262,
      241,  242,  263,  243,  264,  265,  245,  249,  247,  248,
      267,  268,  270,  250,  251,  252,  269,  256,  261,  271,
      272,  257,  260,  273,  262,  275,  277,  263,  276,  278,
      264,  265,  279,  282,  283,  285,  267,  268,  270,  284,
      286,  269,  287,  290,  271,  272,  288,  291,  273,  292,
      293,  275,  277,  276,  294,  278,  296,  279,  297,  282,

      283,  285,  298,  299,  284,  286,  300,  301,  287,  290,
      302,  288,  291,  303,  305,  292,  293,  306,  308,  294,
      309,  296,  310,  311,  297,  313,  314,  315,  298,  299,
      319,  300,  320,  301,  321,  302,  322,  323,  303,  305,
      324,  325,  306,  326,  308,  309,  327,  310,  311,  328,
      313,  314,  330,  315,  332,  333,  319,  334,  320,  335,
      321,  336,  322,  323,  337,  324,  325,  338,  340,  326,
      342,  327,  344,  345,  347,  328,  348,  349,  330,  332,
      333,  350,  334,    0,    0,  335,  336,    0,    0,    0,
      337,    0,  338,  340,    0,  342,    0,  344,  345,  347,

        0,    0,  348,  349,    0,    0,  350,  353,  353,  353,
      353,  354,    0,  354,  354,  356,  356,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352
    } ;

static const flex_int16_t yy_rule_linenum[66] =
    {   0,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,  120,  125,  130,  135,
      140,  146,  151,  156,  162
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "BookshelfScanner.ll"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "BookshelfScanner.ll"

#include <string>

#include "BookshelfScanner.h"

/* import the parser's token type into a local typedef */
typedef BookshelfParser::Parser::token token;
typedef BookshelfParser::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 803 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 48 "BookshelfScanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 816 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"
#line 817 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 51 "BookshelfScanner.ll"


#line 54 "BookshelfScanner.ll"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 1021 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 353 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 352 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 66 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 66 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 67 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "BookshelfScanner.ll"
{return token::KWD_NUMNETS;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "BookshelfScanner.ll"
{return token::KWD_NUMPINS;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 64 "BookshelfScanner.ll"
{return token::KWD_NUMNODES;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 65 "BookshelfScanner.ll"
{return token::KWD_NUMTERMINALS;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 66 "BookshelfScanner.ll"
{return token::KWD_NUMNONRECTANGULARNODES;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "BookshelfScanner.ll"
{return token::KWD_NUMROWS;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "BookshelfScanner.ll"
{return token::KWD_COREROW;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "BookshelfScanner.ll"
{return token::KWD_HORIZONTAL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "BookshelfScanner.ll"
{return token::KWD_VERTICAL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "BookshelfScanner.ll"
{return token::KWD_COORDINATE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "BookshelfScanner.ll"
{return token::KWD_HEIGHT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "BookshelfScanner.ll"
{return token::KWD_SITEWIDTH;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "BookshelfScanner.ll"
{return token::KWD_SITESPACING;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "BookshelfScanner.ll"
{return token::KWD_SITEORIENT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 76 "BookshelfScanner.ll"
{return token::KWD_SITESYMMETRY;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 77 "BookshelfScanner.ll"
{return token::KWD_SUBROWORIGIN;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 78 "BookshelfScanner.ll"
{return token::KWD_NUMSITES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 79 "BookshelfScanner.ll"
{return token::KWD_END;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 80 "BookshelfScanner.ll"
{return token::KWD_TERMINAL_NI;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 81 "BookshelfScanner.ll"
{return token::KWD_TERMINAL;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 82 "BookshelfScanner.ll"
{return token::KWD_UCLA;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 83 "BookshelfScanner.ll"
{return token::KWD_NETDEGREE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 84 "BookshelfScanner.ll"
{return token::KWD_SCL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 85 "BookshelfScanner.ll"
{return token::KWD_NODES;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 86 "BookshelfScanner.ll"
{return token::KWD_NETS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 87 "BookshelfScanner.ll"
{return token::KWD_PL;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 88 "BookshelfScanner.ll"
{return token::KWD_WTS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 89 "BookshelfScanner.ll"
{return token::KWD_SHAPES;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "BookshelfScanner.ll"
{return token::KWD_ROUTE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 91 "BookshelfScanner.ll"
{return token::KWD_AUX;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 92 "BookshelfScanner.ll"
{return token::KWD_FIXED;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 93 "BookshelfScanner.ll"
{return token::KWD_FIXED_NI;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 94 "BookshelfScanner.ll"
{return token::KWD_PLACED;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 95 "BookshelfScanner.ll"
{return token::KWD_UNPLACED;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 96 "BookshelfScanner.ll"
{return token::KWD_O;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 97 "BookshelfScanner.ll"
{return token::KWD_I;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 98 "BookshelfScanner.ll"
{return token::KWD_B;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 99 "BookshelfScanner.ll"
{return token::KWD_N;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 100 "BookshelfScanner.ll"
{return token::KWD_S;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 101 "BookshelfScanner.ll"
{return token::KWD_W;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 102 "BookshelfScanner.ll"
{return token::KWD_E;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 103 "BookshelfScanner.ll"
{return token::KWD_FN;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 104 "BookshelfScanner.ll"
{return token::KWD_FS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 105 "BookshelfScanner.ll"
{return token::KWD_FW;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 106 "BookshelfScanner.ll"
{return token::KWD_FE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 107 "BookshelfScanner.ll"
{return token::KWD_GRID;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "BookshelfScanner.ll"
{return token::KWD_VERTICALCAPACITY;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "BookshelfScanner.ll"
{return token::KWD_HORIZONTALCAPACITY;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "BookshelfScanner.ll"
{return token::KWD_MINWIREWIDTH;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "BookshelfScanner.ll"
{return token::KWD_MINWIRESPACING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "BookshelfScanner.ll"
{return token::KWD_VIASPACING;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "BookshelfScanner.ll"
{return token::KWD_GRIDORIGIN;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "BookshelfScanner.ll"
{return token::KWD_TILESIZE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "BookshelfScanner.ll"
{return token::KWD_BLOCKAGE_POROSITY;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "BookshelfScanner.ll"
{return token::KWD_NUMNITERMINALS;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "BookshelfScanner.ll"
{return token::KWD_NUMBLOCKAGENODES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 120 "BookshelfScanner.ll"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "BookshelfScanner.ll"
{
    yylval->doubleVal = atof(yytext);
    return token::DOUBLE;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 130 "BookshelfScanner.ll"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::BINARY;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "BookshelfScanner.ll"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 140 "BookshelfScanner.ll"
{
    yylval->quoteVal = new std::string(yytext+1, yyleng-2);
    return token::QUOTE;
}
	YY_BREAK
/* gobble up comments */
case 62:
YY_RULE_SETUP
#line 146 "BookshelfScanner.ll"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up white-spaces */
case 63:
YY_RULE_SETUP
#line 151 "BookshelfScanner.ll"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 156 "BookshelfScanner.ll"
{
    yylloc->lines(yyleng); yylloc->step();
     return token::EOL; 
}
	YY_BREAK
/* pass all other characters up to bison */
case 65:
YY_RULE_SETUP
#line 162 "BookshelfScanner.ll"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 66:
YY_RULE_SETUP
#line 168 "BookshelfScanner.ll"
ECHO;
	YY_BREAK
#line 1457 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/bookshelf/bison/BookshelfScanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 353 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 353 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 352);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 168 "BookshelfScanner.ll"


namespace BookshelfParser {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : BookshelfParserFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int BookshelfParserFlexLexer::yylex()
{
    std::cerr << "in BookshelfParserFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int BookshelfParserFlexLexer::yywrap()
{
    return 1;
}

