#line 2 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"

#line 4 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer DefParserFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

#ifdef yyalloc
#define DefParseralloc_ALREADY_DEFINED
#else
#define yyalloc DefParseralloc
#endif

#ifdef yyrealloc
#define DefParserrealloc_ALREADY_DEFINED
#else
#define yyrealloc DefParserrealloc
#endif

#ifdef yyfree
#define DefParserfree_ALREADY_DEFINED
#else
#define yyfree DefParserfree
#endif

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[290] =
    {   0,
        0,    0,   61,   59,   57,   58,   59,   56,   59,   59,
       51,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   57,
        0,   55,   56,    0,   51,    0,   52,   51,   54,    0,
       54,   54,   11,   54,   54,   54,   54,   10,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   53,   52,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   16,   54,   54,   54,   54,
       54,   54,   17,   54,   54,   54,   54,   54,   54,   54,

        9,   54,   54,   54,   54,   54,   54,   54,   54,   32,
       54,   25,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   15,
       54,   14,   54,   54,   35,   54,   54,   54,   54,   54,
       54,   54,   12,   54,   44,   54,   54,   54,   24,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   45,   54,   47,   54,   19,   54,   54,   54,   54,
       54,   54,   54,   34,   54,   54,   54,   54,    5,   54,
       54,   40,   54,   54,   54,   54,   54,    4,   54,   54,
       54,   54,   54,   54,   46,   54,   28,   54,   54,   54,

       54,   43,   54,   31,   36,   54,   54,   22,   54,   54,
       54,   54,   54,   27,   54,    8,   54,   54,   54,   54,
       54,   54,    7,   54,   54,   54,   42,   50,   41,   54,
        1,   26,   54,   54,   54,   54,   54,    6,   54,   54,
       54,   54,   54,   54,   54,   54,   48,   54,   54,   54,
       18,   54,   30,   23,   54,   54,   49,   54,   54,   54,
       54,   13,   29,   54,   54,   54,   54,   54,    3,   54,
        2,   39,   54,   54,   33,   21,   54,   54,   54,   54,
       38,   54,   37,   54,   54,   54,   54,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    7,
        7,    8,    9,    8,   10,   11,    8,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       22,   29,   30,   31,   32,   33,   34,   22,   35,   36,
        8,   37,    8,    1,   38,    1,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[39] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    3,    3
    } ;

static const flex_int16_t yy_base[294] =
    {   0,
        0,    0,  578,  579,  575,  579,  572,    0,    0,  563,
       33,  537,   16,   15,   29,   17,   24,   34,   42,   44,
       37,   43,   38,   51,   45,   48,   60,   70,   63,  571,
      568,  579,    0,  559,   81,    0,  558,   83,  532,  561,
       69,   68,  530,   74,   71,   73,   84,  529,  100,   83,
       87,   85,   89,   88,  104,   96,  102,  103,  117,  105,
      116,  111,  121,   32,  133,  119,  125,  123,  126,  127,
      120,  139,  143,  553,  552,  140,  147,  137,  136,  146,
      155,  152,  141,  150,  151,  526,  164,  157,  153,  166,
      169,  162,  163,  179,  167,  181,  170,  171,  184,  178,

      195,  183,  185,  197,  198,  189,  204,  206,  193,  525,
      199,  208,  194,  205,  212,  213,  218,  225,  219,  232,
      214,  236,  226,  237,  233,  230,  229,  231,  234,  524,
      247,  523,  248,  255,  522,  249,  254,  250,  261,  264,
      259,  260,  521,  265,  520,  252,  262,  258,  519,  273,
      281,  269,  277,  268,  294,  282,  292,  280,  286,  296,
      285,  518,  297,  290,  293,  295,  298,  308,  303,  307,
      311,  312,  315,  517,  324,  316,  330,  317,  516,  319,
      326,  515,  332,  340,  341,  342,  345,  514,  344,  343,
      347,  336,  334,  339,  513,  357,  512,  353,  359,  358,

      354,  356,  355,  511,  510,  368,  364,  509,  363,  380,
      381,  379,  376,  508,  382,  507,  377,  389,  392,  383,
      387,  394,  506,  378,  385,  386,  505,  504,  503,  399,
      502,  501,  397,  415,  401,  404,  407,  500,  417,  418,
      423,  419,  421,  411,  427,  429,  499,  420,  431,  428,
      498,  437,  497,  496,  425,  432,  495,  436,  439,  441,
      446,  494,  493,  443,  456,  448,  461,  451,  492,  458,
      491,  490,  450,  465,  489,  484,  466,  463,  474,  471,
      464,  468,  477,  475,  470,  478,  476,  473,  579,  515,
      519,  505,  521

    } ;

static const flex_int16_t yy_def[294] =
    {   0,
      289,    1,  289,  289,  289,  289,  290,  291,  292,  289,
      289,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  289,
      290,  289,  291,  289,  289,  292,  289,  289,  293,  289,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  289,  289,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,    0,  289,
      289,  289,  289

    } ;

static const flex_int16_t yy_nxt[618] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,    4,   10,   10,
        4,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       12,   12,   12,   20,   21,   22,   12,   23,   24,   25,
       26,   27,   28,   29,   12,   12,    4,   12,   36,   41,
       50,   44,   49,   37,   38,   46,   45,   42,   51,   47,
       43,   40,   40,   40,   53,   48,   54,   55,   58,   56,
       40,   59,   52,  103,   63,   40,   60,   61,   40,   57,
       40,   64,   65,   40,   40,   66,   67,   62,   40,   40,
       40,   40,   68,   73,   40,   69,   71,   40,   36,   70,
       72,   37,   35,   37,   38,   76,   40,   77,   78,   40,

       81,   79,   80,   88,   40,   40,   40,   40,   87,   40,
       40,   89,   82,   83,   85,   86,   84,   90,   92,   40,
       40,   40,   91,   40,   40,   40,   93,   94,   95,   96,
       98,   97,   40,  102,   99,  106,   40,  107,   40,   40,
       40,   40,  100,  110,  101,  104,  109,   40,  111,  105,
      108,  112,   40,   40,  114,   40,   40,   40,  113,   40,
      115,   40,   40,   40,  116,  117,  118,  119,  120,   40,
      122,  121,   40,   40,  123,   40,   40,   40,  124,   40,
      125,  127,   40,   40,  126,  128,   40,   40,   40,   40,
      129,   40,  130,   40,  131,  133,  132,  134,   40,   40,

       40,  135,   40,   40,  136,   40,   40,   40,  137,  138,
      139,  141,  142,  140,   40,   40,  143,   40,  144,   40,
       40,   40,  145,  146,  150,   40,  159,  151,  147,   40,
       40,   40,  152,   40,   40,   40,  148,  149,  154,  153,
       40,   40,   40,  156,   40,  155,  158,  157,   40,   40,
       40,  160,  161,  162,   40,   40,  163,  164,  165,  166,
      167,   40,   40,  168,  169,   40,   40,   40,   40,   40,
       40,  170,   40,   40,  172,  171,  173,  174,  175,  176,
      177,  179,  180,   40,   40,   40,   40,  178,   40,  181,
       40,   40,  182,  183,   40,   40,   40,   40,   40,  184,

       40,   40,  185,  186,   40,   40,  187,  188,  189,   40,
      190,  191,  192,   40,  193,  194,   40,   40,   40,  195,
      196,   40,   40,  198,  197,  199,   40,  200,   40,   40,
       40,   40,   40,   40,   40,  201,  202,  203,  204,   40,
      205,  206,  207,   40,   40,  209,  208,   40,   40,  210,
      211,   40,   40,   40,  212,   40,  216,  213,  214,  215,
       40,  218,   40,  217,  219,  220,   40,  221,   40,  222,
       40,  224,   40,  228,  225,   40,   40,   40,   40,   40,
       40,   40,  223,   40,  226,  227,  229,  230,  231,   40,
       40,   40,   40,   40,   40,   40,  232,  233,  234,   40,

       40,  235,  236,  237,   40,  238,  239,  241,  242,  243,
      244,  240,   40,   40,   40,   40,   40,   40,   40,   40,
      245,   40,   40,   40,  246,   40,  247,  248,   40,  250,
       40,  249,  251,   40,  253,   40,  252,   40,  254,  255,
       40,  257,  258,   40,  256,  259,  263,   40,  260,  264,
      265,   40,  267,   40,   40,   40,   40,   40,  261,   40,
      262,   40,  266,   40,   40,   40,  270,   40,   40,  268,
      269,  271,   40,   40,  272,   40,  273,   40,  274,   40,
      275,  277,   40,  276,   40,  278,   40,   40,  280,  279,
      281,  282,   40,  283,   40,  285,  286,   40,  284,   40,

       40,   40,   40,  287,   40,  288,   40,   40,   34,   40,
       40,   40,   40,   40,   40,   31,   31,   31,   31,   33,
       40,   33,   33,   39,   39,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   75,   74,   40,   40,   39,   40,   75,
       74,   32,   30,   40,   35,   32,   30,  289,    3,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289
    } ;

static const flex_int16_t yy_chk[618] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   13,
       17,   14,   16,   11,   11,   15,   14,   13,   18,   15,
       13,   14,   13,   16,   19,   15,   20,   21,   23,   22,
       17,   23,   18,   64,   25,   15,   23,   24,   64,   22,
       18,   25,   25,   21,   23,   25,   26,   24,   19,   22,
       20,   25,   26,   29,   26,   27,   28,   24,   38,   27,
       28,   35,   35,   38,   38,   41,   27,   42,   44,   29,

       47,   45,   46,   51,   42,   41,   28,   45,   50,   46,
       44,   52,   47,   47,   49,   49,   47,   53,   55,   50,
       47,   52,   54,   51,   54,   53,   56,   57,   58,   59,
       61,   60,   56,   63,   61,   66,   49,   67,   57,   58,
       55,   60,   62,   70,   62,   65,   69,   62,   71,   65,
       68,   72,   61,   59,   76,   66,   71,   63,   73,   68,
       77,   67,   69,   70,   78,   79,   80,   81,   82,   65,
       84,   83,   79,   78,   85,   72,   76,   83,   87,   73,
       88,   90,   80,   77,   89,   91,   84,   85,   82,   89,
       92,   81,   93,   88,   94,   96,   95,   97,   92,   93,

       87,   98,   90,   95,   99,   91,   97,   98,  100,  101,
      102,  104,  105,  103,  100,   94,  106,   96,  107,  102,
       99,  103,  108,  109,  113,  106,  121,  114,  111,  109,
      113,  101,  115,  104,  105,  111,  112,  112,  117,  116,
      107,  114,  108,  118,  112,  117,  120,  119,  115,  116,
      121,  122,  123,  124,  117,  119,  125,  126,  127,  128,
      129,  118,  123,  131,  133,  127,  126,  128,  120,  125,
      129,  134,  122,  124,  137,  136,  138,  139,  140,  141,
      142,  146,  147,  131,  133,  136,  138,  144,  146,  148,
      137,  134,  150,  151,  148,  141,  142,  139,  147,  152,

      140,  144,  153,  154,  154,  152,  155,  156,  157,  150,
      158,  159,  160,  153,  161,  163,  158,  151,  156,  164,
      165,  161,  159,  167,  166,  168,  164,  169,  157,  165,
      155,  166,  160,  163,  167,  170,  171,  172,  173,  169,
      175,  176,  177,  170,  168,  180,  178,  171,  172,  181,
      183,  173,  176,  178,  184,  180,  189,  185,  186,  187,
      175,  191,  181,  190,  192,  193,  177,  194,  183,  196,
      193,  199,  192,  203,  200,  194,  184,  185,  186,  190,
      189,  187,  198,  191,  201,  202,  206,  207,  209,  198,
      201,  203,  202,  196,  200,  199,  210,  211,  212,  209,

      207,  213,  215,  217,  206,  218,  219,  221,  222,  224,
      225,  220,  213,  217,  224,  212,  210,  211,  215,  220,
      226,  225,  226,  221,  230,  218,  233,  234,  219,  236,
      222,  235,  237,  233,  240,  230,  239,  235,  241,  242,
      236,  244,  245,  237,  243,  246,  250,  244,  248,  252,
      255,  234,  258,  239,  240,  242,  248,  243,  249,  241,
      249,  255,  256,  245,  250,  246,  261,  249,  256,  259,
      260,  264,  258,  252,  265,  259,  266,  260,  267,  264,
      268,  273,  261,  270,  266,  274,  273,  268,  278,  277,
      279,  280,  265,  281,  270,  284,  285,  267,  282,  278,

      281,  274,  277,  286,  282,  287,  285,  280,  292,  288,
      279,  284,  287,  283,  286,  290,  290,  290,  290,  291,
      276,  291,  291,  293,  293,  275,  272,  271,  269,  263,
      262,  257,  254,  253,  251,  247,  238,  232,  231,  229,
      228,  227,  223,  216,  214,  208,  205,  204,  197,  195,
      188,  182,  179,  174,  162,  149,  145,  143,  135,  132,
      130,  110,   86,   75,   74,   48,   43,   40,   39,   37,
       34,   31,   30,   12,   10,    7,    5,    3,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289
    } ;

static const flex_int16_t yy_rule_linenum[60] =
    {   0,
       62,   65,   68,   71,   74,   77,   80,   83,   86,   89,
       92,   95,   98,  101,  104,  107,  110,  113,  116,  119,
      122,  125,  128,  131,  134,  137,  140,  143,  146,  149,
      152,  155,  158,  161,  164,  167,  170,  173,  176,  179,
      182,  185,  188,  191,  194,  197,  200,  203,  206,  209,
      213,  218,  223,  228,  233,  239,  244,  249,  255
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "DefScanner.ll"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "DefScanner.ll"

#include <string>

#include "DefScanner.h"

/* import the parser's token type into a local typedef */
typedef DefParser::Parser::token token;
typedef DefParser::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

#line 745 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 48 "DefScanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 758 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"
#line 759 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 51 "DefScanner.ll"


#line 54 "DefScanner.ll"
 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

#line 963 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 290 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 289 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 60 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 60 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 61 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 62 "DefScanner.ll"
{
	return token::KWD_VERSION;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "DefScanner.ll"
{
	return token::KWD_DIVIDERCHAR;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "DefScanner.ll"
{
	return token::KWD_BUSBITCHARS;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "DefScanner.ll"
{
	return token::KWD_DESIGN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "DefScanner.ll"
{
	return token::KWD_UNITS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "DefScanner.ll"
{
	return token::KWD_DISTANCE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 80 "DefScanner.ll"
{
	return token::KWD_MICRONS;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "DefScanner.ll"
{
	return token::KWD_DIEAREA;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "DefScanner.ll"
{
	return token::KWD_ROW;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "DefScanner.ll"
{
	return token::KWD_DO;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "DefScanner.ll"
{
	return token::KWD_BY;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "DefScanner.ll"
{
	return token::KWD_STEP;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "DefScanner.ll"
{
	return token::KWD_COMPONENTS;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 101 "DefScanner.ll"
{
	return token::KWD_PINS;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 104 "DefScanner.ll"
{
	return token::KWD_NETS;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "DefScanner.ll"
{
	return token::KWD_END;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 110 "DefScanner.ll"
{
	return token::KWD_NET;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 113 "DefScanner.ll"
{
	return token::KWD_DIRECTION;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "DefScanner.ll"
{
	return token::KWD_LAYER;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "DefScanner.ll"
{
	return token::KWD_PROPERTYDEFINITIONS;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 122 "DefScanner.ll"
{
	return token::KWD_COMPONENTPIN;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 125 "DefScanner.ll"
{
	return token::KWD_TRACKS;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 128 "DefScanner.ll"
{
	return token::KWD_GCELLGRID;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "DefScanner.ll"
{
	return token::KWD_VIAS;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 134 "DefScanner.ll"
{
	return token::KWD_VIA;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "DefScanner.ll"
{
	return token::KWD_VIARULE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "DefScanner.ll"
{
	return token::KWD_CUTSIZE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "DefScanner.ll"
{
	return token::KWD_LAYERS;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "DefScanner.ll"
{
	return token::KWD_CUTSPACING;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 149 "DefScanner.ll"
{
	return token::KWD_ENCLOSURE;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "DefScanner.ll"
{
	return token::KWD_ROWCOL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 155 "DefScanner.ll"
{
	return token::KWD_USE;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "DefScanner.ll"
{
	return token::KWD_SPECIALNETS;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 161 "DefScanner.ll"
{
	return token::KWD_SHAPE;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 164 "DefScanner.ll"
{
	return token::KWD_RECT;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "DefScanner.ll"
{
	return token::KWD_SOURCE;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 170 "DefScanner.ll"
{
	return token::KWD_NONDEFAULTRULES;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 173 "DefScanner.ll"
{
	return token::KWD_NONDEFAULTRULE;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 176 "DefScanner.ll"
{
	return token::KWD_HARDSPACING;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 179 "DefScanner.ll"
{
	return token::KWD_WIDTH;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 182 "DefScanner.ll"
{
	return token::KWD_SPACING;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 185 "DefScanner.ll"
{
	return token::KWD_REGIONS;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 188 "DefScanner.ll"
{
	return token::KWD_REGION;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 191 "DefScanner.ll"
{
	return token::KWD_TYPE;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "DefScanner.ll"
{
	return token::KWD_FENCE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 197 "DefScanner.ll"
{
	return token::KWD_GROUPS;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 200 "DefScanner.ll"
{
	return token::KWD_GROUP;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 203 "DefScanner.ll"
{
    return token::KWD_BLOCKAGES;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 206 "DefScanner.ll"
{
    return token::KWD_PLACEMENT;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 209 "DefScanner.ll"
{
    return token::KWD_ROUTING;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 213 "DefScanner.ll"
{
    yylval->integerVal = atoi(yytext);
    return token::INTEGER;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 218 "DefScanner.ll"
{
    yylval->doubleVal = atof(yytext);
    return token::DOUBLE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 223 "DefScanner.ll"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::BINARY;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 228 "DefScanner.ll"
{
    yylval->stringVal = new std::string(yytext, yyleng);
    return token::STRING;
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 233 "DefScanner.ll"
{
    yylval->quoteVal = new std::string(yytext+1, yyleng-2);
    return token::QUOTE;
}
	YY_BREAK
/* gobble up comments */
case 56:
YY_RULE_SETUP
#line 239 "DefScanner.ll"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up white-spaces */
case 57:
YY_RULE_SETUP
#line 244 "DefScanner.ll"
{
    yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 249 "DefScanner.ll"
{
    yylloc->lines(yyleng); yylloc->step();
    /* return token::EOL; */
}
	YY_BREAK
/* pass all other characters up to bison */
case 59:
YY_RULE_SETUP
#line 255 "DefScanner.ll"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 60:
YY_RULE_SETUP
#line 261 "DefScanner.ll"
ECHO;
	YY_BREAK
#line 1469 "/home/msears/AIEplace/cpp/Limbo/build/limbo/parsers/def/bison/DefScanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 290 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 290 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 289);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 261 "DefScanner.ll"


namespace DefParser {

Scanner::Scanner(std::istream* in,
		 std::ostream* out)
    : DefParserFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int DefParserFlexLexer::yylex()
{
    std::cerr << "in DefParserFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int DefParserFlexLexer::yywrap()
{
    return 1;
}

